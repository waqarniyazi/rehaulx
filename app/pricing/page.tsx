"use client"

import { useEffect, useState } from "react"
import Image from "next/image"
import Script from "next/script"
import { Header } from "@/components/Header/Header"
import { Footer } from "@/components/Footer/Footer"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Sparkles, Check, Zap, Crown, Rocket, Star, Users, Shield, Headphones, TrendingUp, Globe, Banknote } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

type Currency = "USD" | "INR" | "GBP" | "EUR"

const CURRENCY_SYMBOL: Record<Currency, string> = {
  USD: "$",
  INR: "₹",
  GBP: "£",
  EUR: "€",
}

// Approximate conversion rates relative to USD (display only)
const FX: Record<Currency, number> = {
  USD: 1,
  INR: 83.5,
  GBP: 0.78,
  EUR: 0.92,
}

export default function PricingPage() {
  const [isAnnual, setIsAnnual] = useState(false)
  const [plans, setPlans] = useState<any[]>([])
  const [currency, setCurrency] = useState<Currency>("USD")
  const [loadingPlan, setLoadingPlan] = useState<string | null>(null)

  useEffect(() => {
    fetch('/api/plans')
      .then((r) => r.json())
      .then((d) => setPlans(d.plans || []))
      .catch(() => setPlans([]))
  }, [])

  const faqs = [
    {
      question: "How does the free trial work?",
      answer:
        "All paid plans come with a 14-day free trial. No credit card required. You can cancel anytime during the trial period.",
    },
    {
      question: "What video platforms do you support?",
      answer: "We currently support YouTube videos. Support for Vimeo, TikTok, and other platforms is coming soon.",
    },
    {
      question: "Can I change my plan anytime?",
      answer:
        "Yes! You can upgrade or downgrade your plan at any time. Changes take effect immediately, and we'll prorate the billing.",
    },
    {
      question: "What content formats do you generate?",
      answer:
        "We generate blog articles (short & long), LinkedIn posts, Twitter threads, and newsletter content. Custom formats available on higher plans.",
    },
    {
      question: "Is my content secure?",
      answer:
        "Absolutely. We use enterprise-grade security, encrypt all data, and never store your video files permanently. Your content is processed and deleted.",
    },
    {
      question: "Do you offer refunds?",
      answer:
        "Yes, we offer a 30-day money-back guarantee on all paid plans. If you're not satisfied, we'll refund your payment in full.",
    },
    {
      question: "Can I use this for commercial purposes?",
      answer: "Yes! All plans include commercial usage rights. You own all the content generated by our AI.",
    },
    {
      question: "What languages do you support?",
      answer: "Currently, we support English content generation. Multi-language support is on our roadmap for 2024.",
    },
  ]

  const addOns = [
    {
      name: "Extra Processing Power",
      description: "2x faster video processing",
      priceUsd: 10,
      icon: Zap,
    },
    {
      name: "Premium Support",
      description: "Priority email & chat support",
      priceUsd: 25,
      icon: Headphones,
    },
    {
      name: "Advanced Analytics",
      description: "Detailed performance insights",
      priceUsd: 15,
      icon: TrendingUp,
    },
    {
      name: "Custom Integrations",
      description: "Connect to your favorite tools",
      priceUsd: 50,
      icon: Globe,
    },
  ]

  const formatPrice = (usd: number) => {
    const amount = usd * FX[currency]
    // Round sensibly for INR (no decimals) vs others (2 decimals)
    const minimumFractionDigits = currency === "INR" ? 0 : 2
    const maximumFractionDigits = currency === "INR" ? 0 : 2
    try {
      return new Intl.NumberFormat(undefined, {
        style: "currency",
        currency,
        minimumFractionDigits,
        maximumFractionDigits,
      }).format(amount)
    } catch {
      // Fallback if environment lacks Intl currency support
      return `${CURRENCY_SYMBOL[currency]}${amount.toFixed(maximumFractionDigits)}`
    }
  }

  const currencyIconPath = (c: Currency) => `/PricingIcons/${c}.png`

  const planIconFor = (planName: string) => {
    switch (planName) {
      case 'starter':
        return <Star className="h-6 w-6 text-blue-400" />
      case 'basic':
        return <Rocket className="h-6 w-6 text-purple-400" />
      case 'growth':
        return <TrendingUp className="h-6 w-6 text-emerald-400" />
      case 'pro':
        return <Crown className="h-6 w-6 text-yellow-400" />
      default:
        return <Sparkles className="h-6 w-6 text-blue-400" />
    }
  }

  const handleSubscribe = async (plan: any, cycle: 'monthly' | 'yearly') => {
    try {
      setLoadingPlan(`${plan.id}-${cycle}`)
      const res = await fetch('/api/payments/create-checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'subscription',
          plan_id: String(plan.id),
          billing_cycle: cycle,
          currency: currency === 'INR' ? 'INR' : 'USD',
        })
      })
    const data = await res.json()
      if (!res.ok) throw new Error(data.error || 'Checkout failed')

      // Load Razorpay Checkout
    const { order, key_id } = data
      // @ts-ignore
      if (typeof window !== 'undefined' && window.Razorpay) {
        // @ts-ignore
        const rzp = new window.Razorpay({
      key: key_id || process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID || 'your_public_key',
          amount: order.amount,
          currency: order.currency,
          name: 'ReHaulX',
          description: `${plan.display_name} (${cycle})`,
          order_id: order.id,
          notes: order.notes,
        })
        rzp.open()
      } else {
        alert('Razorpay not available. Please ensure the script is loaded on this page.')
      }
    } catch (e: any) {
      alert(e.message || 'Failed to start checkout')
    } finally {
      setLoadingPlan(null)
    }
  }

  return (
    <div className="min-h-screen bg-black">
      {/* Razorpay Checkout script */}
      <Script src="https://checkout.razorpay.com/v1/checkout.js" strategy="afterInteractive" />
      <Header />

      <main className="container mx-auto px-4 py-12">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <div className="inline-flex items-center gap-2 bg-white/5 backdrop-blur-xl border border-white/10 rounded-full px-4 py-2 mb-6">
            <Star className="h-4 w-4 text-yellow-400" />
            <span className="text-sm text-white/80">Simple, Transparent Pricing</span>
          </div>
          <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-white via-white/90 to-white/70 bg-clip-text text-transparent mb-6">
            Choose Your Plan
          </h1>
          <p className="text-xl text-white/60 max-w-3xl mx-auto mb-8">
            Start free and scale as you grow. All plans include our core AI features with no hidden fees.
          </p>

          {/* Billing Toggle */}
          <div className="flex flex-col items-center gap-3 sm:flex-row sm:justify-center sm:gap-4 mb-12">
            <div className="flex items-center gap-4">
              <span className={`text-sm ${!isAnnual ? "text-white" : "text-white/60"}`}>Monthly</span>
              <Switch checked={isAnnual} onCheckedChange={setIsAnnual} className="data-[state=checked]:bg-blue-500" />
              <span className={`text-sm ${isAnnual ? "text-white" : "text-white/60"}`}>Annual</span>
              <Badge className="bg-green-500/20 text-green-400 border-green-500/30">Save 20%</Badge>
            </div>
            <div className="sm:ml-6">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" className="bg-white/5 backdrop-blur-xl border-white/20 hover:bg-white/10 hover:border-white/30">
                    <Banknote className="mr-2 h-4 w-4" />
                    <span className="mr-2">{currency}</span>
                    <Image src={currencyIconPath(currency)} alt={`${currency} icon`} width={16} height={16} className="rounded-sm" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-44 bg-black/95 text-white border border-white/10" align="end" sideOffset={8}>
                  <DropdownMenuLabel>Select Currency</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {(["USD", "INR", "GBP", "EUR"] as Currency[]).map((c) => (
                    <DropdownMenuItem key={c} onClick={() => setCurrency(c)} className="cursor-pointer flex items-center gap-2">
                      <Image src={currencyIconPath(c)} alt={`${c} icon`} width={16} height={16} className="rounded-sm" />
                      <span>{c}</span>
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>

        {/* Pricing Cards (live from DB) */}
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16 items-stretch">
      {plans.map((plan: any) => (
            <Card
              key={plan.id}
      className={`bg-white/5 backdrop-blur-xl border transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/10 group flex flex-col h-full ${
                plan.name === 'growth' && isAnnual
                  ? "border-purple-500/50 bg-gradient-to-b from-purple-500/10 to-transparent"
                  : "border-white/10 hover:border-white/20"
              }`}
            >
              <CardHeader className="text-center pb-4">
                <div className="flex items-center justify-center mb-4">
                  <div className="h-12 w-12 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-xl flex items-center justify-center transition-transform duration-300 group-hover:scale-110">
                    {planIconFor(plan.name)}
                  </div>
                </div>
                <CardTitle className="text-white text-xl mb-2">{plan.display_name}</CardTitle>
                {/* minutes moved below with gradient highlight */}
                {plan.name === 'growth' && isAnnual && (
                  <Badge className="bg-purple-500/20 text-purple-400 border-purple-500/30">Best Value</Badge>
                )}
              </CardHeader>
               <CardContent className="pt-0 flex flex-col h-full">
                <div className="text-center mb-6">
                  <div className="text-3xl font-bold text-white mb-1">
                    {formatPrice((isAnnual ? plan.price_yearly : plan.price_monthly) || 0)}
                    <span className="text-lg text-white/60">/{isAnnual ? 'year' : 'month'}</span>
                  </div>
                  {isAnnual && (
                    <p className="text-sm text-white/60">Billed annually</p>
                  )}
                </div>
                {/* Minutes highlight */}
                <p className="text-sm mb-4 text-white/70 text-center">
                  <span className="bg-gradient-to-r from-blue-300 via-blue-200 to-blue-100 bg-clip-text text-transparent font-semibold">
                    {isAnnual ? plan.minutes_yearly : plan.minutes_monthly}
                  </span>{' '}
                  minutes included
                </p>
                <ul className="space-y-3 mb-6">
                  {(plan.perks || []).map((perk: string, i: number) => (
                    <li key={i} className="flex items-start gap-2">
                      <Check className="h-4 w-4 text-green-400 mt-0.5 flex-shrink-0" />
                      <span className="text-white/80 text-sm">{perk}</span>
                    </li>
                  ))}
                </ul>

                <div className="mt-auto">
                  <Button
                    className="w-full bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white border-0 hover:scale-[1.02] transition-transform duration-300"
                    onClick={() => handleSubscribe(plan, isAnnual ? 'yearly' : 'monthly')}
                    disabled={loadingPlan === `${plan.id}-${isAnnual ? 'yearly' : 'monthly'}`}
                  >
                    {loadingPlan === `${plan.id}-${isAnnual ? 'yearly' : 'monthly'}` ? 'Processing…' : 'Subscribe Now'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Add-ons Section */}
        <div className="mb-16">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-white mb-4">Power-ups & Add-ons</h2>
            <p className="text-white/60 max-w-2xl mx-auto">
              Enhance your plan with additional features and capabilities.
            </p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {addOns.map((addon, index) => (
              <Card key={index} className="bg-white/5 backdrop-blur-xl border border-white/10">
                <CardContent className="p-6 text-center">
                  <div className="h-12 w-12 mx-auto mb-4 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-xl flex items-center justify-center">
                    <addon.icon className="h-6 w-6 text-blue-400" />
                  </div>
                  <h3 className="text-lg font-semibold text-white mb-2">{addon.name}</h3>
                  <p className="text-white/60 text-sm mb-4">{addon.description}</p>
                  <div className="text-blue-400 font-semibold">{formatPrice(addon.priceUsd)}/month</div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* FAQ Section */}
        <div className="mb-16">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-white mb-4">Frequently Asked Questions</h2>
            <p className="text-white/60 max-w-2xl mx-auto">
              Got questions? We've got answers. Can't find what you're looking for? Contact our support team.
            </p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {faqs.map((faq, index) => (
              <Card key={index} className="bg-white/5 backdrop-blur-xl border border-white/10">
                <CardContent className="p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">{faq.question}</h3>
                  <p className="text-white/60">{faq.answer}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Enterprise CTA */}
        <Card className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 border border-white/10">
          <CardContent className="p-8 md:p-12">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
              <div>
                <h2 className="text-3xl font-bold text-white mb-4">Need Something Custom?</h2>
                <p className="text-white/80 mb-6 leading-relaxed">
                  Large organization? Unique requirements? We offer custom solutions tailored to your specific needs,
                  including on-premise deployment, custom AI model training, and dedicated support.
                </p>
                <ul className="space-y-2 mb-6">
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4 text-green-400" />
                    <span className="text-white/80">Custom pricing and contracts</span>
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4 text-green-400" />
                    <span className="text-white/80">Dedicated infrastructure</span>
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4 text-green-400" />
                    <span className="text-white/80">24/7 premium support</span>
                  </li>
                  <li className="flex items-center gap-2">
                    <Check className="h-4 w-4 text-green-400" />
                    <span className="text-white/80">SLA guarantees</span>
                  </li>
                </ul>
                <Button className="bg-gradient-to-r from-purple-600 to-purple-500 hover:from-purple-700 hover:to-purple-600 text-white border-0">
                  <Users className="mr-2 h-4 w-4" />
                  Contact Enterprise Sales
                </Button>
              </div>
              <div className="relative">
                <div className="aspect-square bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-2xl flex items-center justify-center">
                  <Shield className="h-24 w-24 text-purple-400" />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>

      <Footer />
    </div>
  )
}
